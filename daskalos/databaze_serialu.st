<?xml version="1.0"?>

<st-source>
<time-stamp>From VisualWorksÂ® NonCommercial, 7.4.1 of May 30, 2006 on April 25, 2020 at 5:04:20 pm</time-stamp>


<class>
<name>Oceneni</name>
<environment>Smalltalk</environment>
<super>DaskalosDataObject</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>nazev popis rok </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>DaskalosUserClasses</category>
<attributes>
<package>DaskalosUserClasses</package>
</attributes>
</class>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Oceneni class</class-id> <category>instance variables behavior</category>

<body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes
"resource for Daskalos"
^((Core.Dictionary new) add: (#rok -&gt; Core.Number); add: (#popis -&gt; Core.String); add: (#nazev -&gt; Core.String); yourself)</body>
</methods>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Oceneni</class-id> <category>accessing</category>

<body package="DaskalosUserClasses" selector="nazev">nazev
"generated by Daskalos"

     ^nazev</body>

<body package="DaskalosUserClasses" selector="nazev:">nazev: anObject
"generated by Daskalos"

     nazev := (self checkValue: anObject forVariable: #nazev)</body>

<body package="DaskalosUserClasses" selector="popis">popis
"generated by Daskalos"

     ^popis</body>

<body package="DaskalosUserClasses" selector="popis:">popis: anObject
"generated by Daskalos"

     popis := (self checkValue: anObject forVariable: #popis)</body>

<body package="DaskalosUserClasses" selector="rok">rok
"generated by Daskalos"

     ^rok</body>

<body package="DaskalosUserClasses" selector="rok:">rok: anObject
"generated by Daskalos"

     rok := (self checkValue: anObject forVariable: #rok)</body>
</methods>

<methods>
<class-id>Oceneni</class-id> <category>instance initialization</category>

<body package="DaskalosUserClasses" selector="initialize">initialize
"generated by Daskalos"

     super initialize.
     nazev := nil.
     popis := nil.
     rok := nil.
</body>
</methods>


<class>
<name>Zanr</name>
<environment>Smalltalk</environment>
<super>DaskalosDataObject</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>nazev </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>DaskalosUserClasses</category>
<attributes>
<package>DaskalosUserClasses</package>
</attributes>
</class>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Zanr class</class-id> <category>instance variables behavior</category>

<body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes
"resource for Daskalos"
^((Core.Dictionary new) add: (#nazev -&gt; Core.String); yourself)</body>
</methods>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Zanr</class-id> <category>accessing</category>

<body package="DaskalosUserClasses" selector="nazev">nazev
"generated by Daskalos"

     ^nazev</body>

<body package="DaskalosUserClasses" selector="nazev:">nazev: anObject
"generated by Daskalos"

     nazev := (self checkValue: anObject forVariable: #nazev)</body>
</methods>

<methods>
<class-id>Zanr</class-id> <category>instance initialization</category>

<body package="DaskalosUserClasses" selector="initialize">initialize
"generated by Daskalos"

     super initialize.
     nazev := nil.
</body>
</methods>


<class>
<name>Adresa</name>
<environment>Smalltalk</environment>
<super>DaskalosDataObject</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>zeme mesto ulice cisloPopisne psc </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>DaskalosUserClasses</category>
<attributes>
<package>DaskalosUserClasses</package>
</attributes>
</class>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Adresa class</class-id> <category>instance variables behavior</category>

<body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes
"resource for Daskalos"
^((Core.Dictionary new) add: (#mesto -&gt; Core.String); add: (#psc -&gt; Core.Number); add: (#zeme -&gt; Core.String); add: (#ulice -&gt; Core.String); add: (#cisloPopisne -&gt; Core.String); yourself)</body>
</methods>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Adresa</class-id> <category>accessing</category>

<body package="DaskalosUserClasses" selector="cisloPopisne">cisloPopisne
"generated by Daskalos"

     ^cisloPopisne</body>

<body package="DaskalosUserClasses" selector="cisloPopisne:">cisloPopisne: anObject
"generated by Daskalos"

     cisloPopisne := (self checkValue: anObject forVariable: #cisloPopisne)</body>

<body package="DaskalosUserClasses" selector="mesto">mesto
"generated by Daskalos"

     ^mesto</body>

<body package="DaskalosUserClasses" selector="psc">psc
"generated by Daskalos"

     ^psc</body>

<body package="DaskalosUserClasses" selector="psc:">psc: anObject
"generated by Daskalos"

     psc := (self checkValue: anObject forVariable: #psc)</body>

<body package="DaskalosUserClasses" selector="ulice">ulice
"generated by Daskalos"

     ^ulice</body>

<body package="DaskalosUserClasses" selector="ulice:">ulice: anObject
"generated by Daskalos"

     ulice := (self checkValue: anObject forVariable: #ulice)</body>

<body package="DaskalosUserClasses" selector="zeme">zeme
"generated by Daskalos"

     ^zeme</body>

<body package="DaskalosUserClasses" selector="zeme:">zeme: anObject
"generated by Daskalos"

     zeme := (self checkValue: anObject forVariable: #zeme)</body>
</methods>

<methods>
<class-id>Adresa</class-id> <category>instance initialization</category>

<body package="DaskalosUserClasses" selector="initialize">initialize
"generated by Daskalos"

     super initialize.
     zeme := nil.
     mesto := nil.
     ulice := nil.
     cisloPopisne := nil.
     psc := nil.
</body>
</methods>

<methods>
<class-id>Adresa</class-id> <category>other methods</category>

<body package="DaskalosUserClasses" selector="mesto:">mesto: anObject 
	"generated by Daskalos"

	mesto := self checkValue: anObject forVariable: #mesto</body>
</methods>


<class>
<name>Lokalita</name>
<environment>Smalltalk</environment>
<super>DaskalosDataObject</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>pocasi cenaKc adresa </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>DaskalosUserClasses</category>
<attributes>
<package>DaskalosUserClasses</package>
</attributes>
</class>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Lokalita class</class-id> <category>instance variables behavior</category>

<body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes
"resource for Daskalos"
^((Core.Dictionary new) add: (#cenaKc -&gt; Core.Number); add: (#adresa -&gt; Core.Object); add: (#pocasi -&gt; Core.String); yourself)</body>
</methods>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Lokalita</class-id> <category>accessing</category>

<body package="DaskalosUserClasses" selector="adresa">adresa
"generated by Daskalos"

     ^adresa</body>

<body package="DaskalosUserClasses" selector="cenaKc">cenaKc
"generated by Daskalos"

     ^cenaKc</body>

<body package="DaskalosUserClasses" selector="cenaKc:">cenaKc: anObject
"generated by Daskalos"

     cenaKc := (self checkValue: anObject forVariable: #cenaKc)</body>

<body package="DaskalosUserClasses" selector="pocasi">pocasi
"generated by Daskalos"

     ^pocasi</body>

<body package="DaskalosUserClasses" selector="pocasi:">pocasi: anObject
"generated by Daskalos"

     pocasi := (self checkValue: anObject forVariable: #pocasi)</body>
</methods>

<methods>
<class-id>Lokalita</class-id> <category>instance initialization</category>

<body package="DaskalosUserClasses" selector="initialize">initialize
"generated by Daskalos"

     super initialize.
     pocasi := nil.
     cenaKc := nil.
     adresa := nil.
</body>
</methods>

<methods>
<class-id>Lokalita</class-id> <category>other methods</category>

<body package="DaskalosUserClasses" selector="adresa:">adresa: anObject 
	"generated by Daskalos"

	| tmpAdresa |
	tmpAdresa := self checkValue: anObject forVariable: #adresa.
	(tmpAdresa isMemberOf: Adresa) 
		ifFalse: 
			[self 
				error: 'Zprava ''Lokalita adresa:'' prijima pouze instanci tridy ''Adresa'''].
	adresa := tmpAdresa</body>
</methods>


<class>
<name>Serie</name>
<environment>Smalltalk</environment>
<super>DaskalosDataObject</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>cisloSerie datumZahajeni serial </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>DaskalosUserClasses</category>
<attributes>
<package>DaskalosUserClasses</package>
</attributes>
</class>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Serie class</class-id> <category>instance variables behavior</category>

<body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes
"resource for Daskalos"
^((Core.Dictionary new) add: (#datumZahajeni -&gt; Core.Date); add: (#cisloSerie -&gt; Core.Number); add: (#serial -&gt; Core.Object); yourself)</body>
</methods>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Serie</class-id> <category>accessing</category>

<body package="DaskalosUserClasses" selector="cisloSerie">cisloSerie
"generated by Daskalos"

     ^cisloSerie</body>

<body package="DaskalosUserClasses" selector="cisloSerie:">cisloSerie: anObject
"generated by Daskalos"

     cisloSerie := (self checkValue: anObject forVariable: #cisloSerie)</body>

<body package="DaskalosUserClasses" selector="datumZahajeni">datumZahajeni
"generated by Daskalos"

     ^datumZahajeni</body>

<body package="DaskalosUserClasses" selector="datumZahajeni:">datumZahajeni: anObject
"generated by Daskalos"

     datumZahajeni := (self checkValue: anObject forVariable: #datumZahajeni)</body>

<body package="DaskalosUserClasses" selector="serial">serial
"generated by Daskalos"

     ^serial</body>
</methods>

<methods>
<class-id>Serie</class-id> <category>instance initialization</category>

<body package="DaskalosUserClasses" selector="initialize">initialize
"generated by Daskalos"

     super initialize.
     cisloSerie := nil.
     datumZahajeni := nil.
     serial := nil.
</body>
</methods>

<methods>
<class-id>Serie</class-id> <category>other methods</category>

<body package="DaskalosUserClasses" selector="DobaTrvani">DobaTrvani
	"Doba trvani v minutach vsech epizod dane serie"

	^((Epizoda allInstances select: [:ep | ep serie = self]) 
		collect: [:e | e dobaTrvani]) sum</body>

<body package="DaskalosUserClasses" selector="Hodnoceni">Hodnoceni
	"Prumerne hodnoceni vsech epizod z dane serie"

	^((Epizoda allInstances select: [:ep | ep serie = self]) 
		collect: [:e | e hodnoceni]) avg</body>

<body package="DaskalosUserClasses" selector="NejlepsiEpizoda">NejlepsiEpizoda
	"Nejlepsi epizoda cele serie"

	| epizody |
	epizody := Epizoda allInstances select: [:ep | ep serie = self].
	^epizody inject: nil
		into: 
			[:a :b | 
			(a isNil ifTrue: [0] ifFalse: [a hodnoceni]) &lt; b hodnoceni 
				ifFalse: [a]
				ifTrue: [b]]</body>

<body package="DaskalosUserClasses" selector="serial:">serial: anObject 
	"generated by Daskalos"

	| tmpSerial |
	tmpSerial := self checkValue: anObject forVariable: #serial.
	(tmpSerial isMemberOf: Serial) 
		ifFalse: 
			[self 
				error: 'Zprava ''Serie serial:'' prijima pouze instanci tridy ''Serial'''].
	serial := tmpSerial</body>
</methods>


<class>
<name>Serial</name>
<environment>Smalltalk</environment>
<super>DaskalosDataObject</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>nazev datumZahajeni popis oceneni zanry spolecnost </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>DaskalosUserClasses</category>
<attributes>
<package>DaskalosUserClasses</package>
</attributes>
</class>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Serial class</class-id> <category>instance variables behavior</category>

<body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes
"resource for Daskalos"
^((Core.Dictionary new) add: (#spolecnost -&gt; Core.Object); add: (#nazev -&gt; Core.String); add: (#zanry -&gt; Core.Set); add: (#datumZahajeni -&gt; Core.Date); add: (#oceneni -&gt; Core.Set); add: (#popis -&gt; Core.String); yourself)</body>
</methods>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Serial</class-id> <category>accessing</category>

<body package="DaskalosUserClasses" selector="datumZahajeni">datumZahajeni
"generated by Daskalos"

     ^datumZahajeni</body>

<body package="DaskalosUserClasses" selector="datumZahajeni:">datumZahajeni: anObject
"generated by Daskalos"

     datumZahajeni := (self checkValue: anObject forVariable: #datumZahajeni)</body>

<body package="DaskalosUserClasses" selector="nazev">nazev
"generated by Daskalos"

     ^nazev</body>

<body package="DaskalosUserClasses" selector="nazev:">nazev: anObject
"generated by Daskalos"

     nazev := (self checkValue: anObject forVariable: #nazev)</body>

<body package="DaskalosUserClasses" selector="oceneni">oceneni
"generated by Daskalos"

     ^oceneni</body>

<body package="DaskalosUserClasses" selector="popis">popis
"generated by Daskalos"

     ^popis</body>

<body package="DaskalosUserClasses" selector="popis:">popis: anObject
"generated by Daskalos"

     popis := (self checkValue: anObject forVariable: #popis)</body>

<body package="DaskalosUserClasses" selector="spolecnost">spolecnost
"generated by Daskalos"

     ^spolecnost</body>

<body package="DaskalosUserClasses" selector="zanry">zanry
"generated by Daskalos"

     ^zanry</body>
</methods>

<methods>
<class-id>Serial</class-id> <category>instance initialization</category>

<body package="DaskalosUserClasses" selector="initialize">initialize
"generated by Daskalos"

     super initialize.
     nazev := nil.
     datumZahajeni := nil.
     popis := nil.
     oceneni := Set new.
     zanry := Set new.
     spolecnost := nil.
</body>
</methods>

<methods>
<class-id>Serial</class-id> <category>other methods</category>

<body package="DaskalosUserClasses" selector="DobaTrvani">DobaTrvani
	"Doba trvani v minutach vsech epizod vsech serii daneho serialu"

	^((Epizoda allInstances select: [:ep | ep serie serial = self]) 
		collect: [:e | e dobaTrvani]) sum</body>

<body package="DaskalosUserClasses" selector="Hodnoceni">Hodnoceni
	"Prumerne hodnoceni vsech epizod ze vsech serii daneho serialu"

	^((Epizoda allInstances select: [:ep | ep serie serial = self]) 
		collect: [:e | e hodnoceni]) avg</body>

<body package="DaskalosUserClasses" selector="PocetEpizod">PocetEpizod
	"Pocet epizod ze vsech serii daneho serialu"

	^(Epizoda allInstances select: [:ep | ep serie serial = self]) size</body>

<body package="DaskalosUserClasses" selector="spolecnost:">spolecnost: anObject 
	"generated by Daskalos"

	| tmpSpolecnost |
	tmpSpolecnost := self checkValue: anObject forVariable: #spolecnost.
	(tmpSpolecnost isMemberOf: Spolecnost) 
		ifFalse: 
			[self 
				error: 'Zprava ''Serial spolecnost:'' prijima pouze instanci tridy ''Spolecnost'''].
	spolecnost := tmpSpolecnost</body>

<body package="DaskalosUserClasses" selector="ZemeNataceni">ZemeNataceni
	"Vsechny zeme nataceni daneho serialu"

	^(((Epizoda allInstances select: [:ep | ep serie serial = self]) 
		collect: [:e | e lokality]) flatten 
		collect: [:l | l adresa zeme]) asSet</body>
</methods>


<class>
<name>Postava</name>
<environment>Smalltalk</environment>
<super>DaskalosDataObject</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>jmeno prijmeni herec </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>DaskalosUserClasses</category>
<attributes>
<package>DaskalosUserClasses</package>
</attributes>
</class>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Postava class</class-id> <category>instance variables behavior</category>

<body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes
"resource for Daskalos"
^((Core.Dictionary new) add: (#prijmeni -&gt; Core.String); add: (#herec -&gt; Core.Object); add: (#jmeno -&gt; Core.String); yourself)</body>
</methods>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Postava</class-id> <category>accessing</category>

<body package="DaskalosUserClasses" selector="herec">herec
"generated by Daskalos"

     ^herec</body>

<body package="DaskalosUserClasses" selector="jmeno">jmeno
"generated by Daskalos"

     ^jmeno</body>

<body package="DaskalosUserClasses" selector="jmeno:">jmeno: anObject
"generated by Daskalos"

     jmeno := (self checkValue: anObject forVariable: #jmeno)</body>

<body package="DaskalosUserClasses" selector="prijmeni">prijmeni
"generated by Daskalos"

     ^prijmeni</body>

<body package="DaskalosUserClasses" selector="prijmeni:">prijmeni: anObject
"generated by Daskalos"

     prijmeni := (self checkValue: anObject forVariable: #prijmeni)</body>
</methods>

<methods>
<class-id>Postava</class-id> <category>instance initialization</category>

<body package="DaskalosUserClasses" selector="initialize">initialize
"generated by Daskalos"

     super initialize.
     jmeno := nil.
     prijmeni := nil.
     herec := nil.
</body>
</methods>

<methods>
<class-id>Postava</class-id> <category>other methods</category>

<body package="DaskalosUserClasses" selector="herec:">herec: anObject 
	"generated by Daskalos"

	| tmpHerec |
	tmpHerec := self checkValue: anObject forVariable: #herec.
	(tmpHerec isMemberOf: Herec) 
		ifFalse: 
			[self 
				error: 'Zprava ''Postava herec:'' prijima pouze instanci tridy ''Herec'''].
	herec := tmpHerec</body>
</methods>


<class>
<name>Epizoda</name>
<environment>Smalltalk</environment>
<super>DaskalosDataObject</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>cisloEpizody datumVysilani nazev hodnoceni popis dobaTrvani scenariste lokality reziser serie postavy </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>DaskalosUserClasses</category>
<attributes>
<package>DaskalosUserClasses</package>
</attributes>
</class>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Epizoda class</class-id> <category>instance variables behavior</category>

<body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes
"resource for Daskalos"
^((Core.Dictionary new) add: (#lokality -&gt; Core.Set); add: (#scenariste -&gt; Core.Set); add: (#nazev -&gt; Core.String); add: (#postavy -&gt; Core.Set); add: (#reziser -&gt; Core.Object); add: (#datumVysilani -&gt; Core.Date); add: (#serie -&gt; Core.Object); add: (#dobaTrvani -&gt; Core.Number); add: (#hodnoceni -&gt; Core.Number); add: (#popis -&gt; Core.String); add: (#cisloEpizody -&gt; Core.Number); yourself)</body>
</methods>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Epizoda</class-id> <category>accessing</category>

<body package="DaskalosUserClasses" selector="cisloEpizody">cisloEpizody
"generated by Daskalos"

     ^cisloEpizody</body>

<body package="DaskalosUserClasses" selector="cisloEpizody:">cisloEpizody: anObject
"generated by Daskalos"

     cisloEpizody := (self checkValue: anObject forVariable: #cisloEpizody)</body>

<body package="DaskalosUserClasses" selector="datumVysilani">datumVysilani
"generated by Daskalos"

     ^datumVysilani</body>

<body package="DaskalosUserClasses" selector="datumVysilani:">datumVysilani: anObject
"generated by Daskalos"

     datumVysilani := (self checkValue: anObject forVariable: #datumVysilani)</body>

<body package="DaskalosUserClasses" selector="dobaTrvani">dobaTrvani
"generated by Daskalos"

     ^dobaTrvani</body>

<body package="DaskalosUserClasses" selector="dobaTrvani:">dobaTrvani: anObject
"generated by Daskalos"

     dobaTrvani := (self checkValue: anObject forVariable: #dobaTrvani)</body>

<body package="DaskalosUserClasses" selector="hodnoceni">hodnoceni
"generated by Daskalos"

     ^hodnoceni</body>

<body package="DaskalosUserClasses" selector="lokality">lokality
"generated by Daskalos"

     ^lokality</body>

<body package="DaskalosUserClasses" selector="nazev">nazev
"generated by Daskalos"

     ^nazev</body>

<body package="DaskalosUserClasses" selector="popis">popis
"generated by Daskalos"

     ^popis</body>

<body package="DaskalosUserClasses" selector="popis:">popis: anObject
"generated by Daskalos"

     popis := (self checkValue: anObject forVariable: #popis)</body>

<body package="DaskalosUserClasses" selector="postavy">postavy
"generated by Daskalos"

     ^postavy</body>

<body package="DaskalosUserClasses" selector="reziser">reziser
"generated by Daskalos"

     ^reziser</body>

<body package="DaskalosUserClasses" selector="scenariste">scenariste
"generated by Daskalos"

     ^scenariste</body>

<body package="DaskalosUserClasses" selector="serie">serie
"generated by Daskalos"

     ^serie</body>
</methods>

<methods>
<class-id>Epizoda</class-id> <category>other methods</category>

<body package="DaskalosUserClasses" selector="hodnoceni:">hodnoceni: anObject 
	"generated by Daskalos"

	| tmpHodnoceni |
	tmpHodnoceni := self checkValue: anObject forVariable: #hodnoceni.
	(tmpHodnoceni &gt; 10 or: [tmpHodnoceni &lt; 0]) 
		ifTrue: [self error: 'Hodnoceni musi byt cislo od 0 do 10'].
	hodnoceni := tmpHodnoceni</body>

<body package="DaskalosUserClasses" selector="nazev:">nazev: anObject 
	"generated by Daskalos"

	| tmpNazev |
	tmpNazev := self checkValue: anObject forVariable: #nazev.
	tmpNazev size &gt; 100 
		ifTrue: [self error: 'Nazev epizody muze mit maximalne 100 znaku'].
	nazev := tmpNazev</body>

<body package="DaskalosUserClasses" selector="reziser:">reziser: anObject 
	"generated by Daskalos"

	| tmpReziser |
	tmpReziser := self checkValue: anObject forVariable: #reziser.
	(tmpReziser isMemberOf: Reziser) 
		ifFalse: 
			[self 
				error: 'Zprava ''Epizoda reziser:'' prijima pouze instanci tridy ''Reziser'''].
	reziser := tmpReziser</body>

<body package="DaskalosUserClasses" selector="serie:">serie: anObject 
	"generated by Daskalos"

	| tmpSerie |
	tmpSerie := self checkValue: anObject forVariable: #serie.
	(tmpSerie isMemberOf: Serie) 
		ifFalse: 
			[self 
				error: 'Zprava ''Epizoda serie:'' prijima pouze instanci tridy ''Serie'''].
	serie := tmpSerie</body>

<body package="DaskalosUserClasses" selector="UmisteniVZebricku">UmisteniVZebricku
	"Umisteni v zebricku serazenych epizod"

	^((Epizoda allInstances collect: [:a | a hodnoceni]) asSet 
		sortBy: [:a | a hodnoceni]) indexOf: hodnoceni</body>
</methods>

<methods>
<class-id>Epizoda</class-id> <category>instance initialization</category>

<body package="DaskalosUserClasses" selector="initialize">initialize
"generated by Daskalos"

     super initialize.
     cisloEpizody := nil.
     datumVysilani := nil.
     nazev := nil.
     hodnoceni := nil.
     popis := nil.
     dobaTrvani := nil.
     scenariste := Set new.
     lokality := Set new.
     reziser := nil.
     serie := nil.
     postavy := Set new.
</body>
</methods>


<class>
<name>Osoba</name>
<environment>Smalltalk</environment>
<super>DaskalosDataObject</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>jmeno prijmeni datumNarozeni narodnost pohlavi oceneni praceHodin hodinovaMzda </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>DaskalosUserClasses</category>
<attributes>
<package>DaskalosUserClasses</package>
</attributes>
</class>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Osoba class</class-id> <category>instance variables behavior</category>

<body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes
"resource for Daskalos"
^((Core.Dictionary new) add: (#narodnost -&gt; Core.String); add: (#oceneni -&gt; Core.Set); add: (#datumNarozeni -&gt; Core.Date); add: (#prijmeni -&gt; Core.String); add: (#hodinovaMzda -&gt; Core.Number); add: (#jmeno -&gt; Core.String); add: (#pohlavi -&gt; Core.String); add: (#praceHodin -&gt; Core.Number); yourself)</body>
</methods>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Osoba</class-id> <category>accessing</category>

<body package="DaskalosUserClasses" selector="hodinovaMzda">hodinovaMzda
"generated by Daskalos"

     ^hodinovaMzda</body>

<body package="DaskalosUserClasses" selector="hodinovaMzda:">hodinovaMzda: anObject
"generated by Daskalos"

     hodinovaMzda := (self checkValue: anObject forVariable: #hodinovaMzda)</body>

<body package="DaskalosUserClasses" selector="jmeno">jmeno
"generated by Daskalos"

     ^jmeno</body>

<body package="DaskalosUserClasses" selector="jmeno:">jmeno: anObject
"generated by Daskalos"

     jmeno := (self checkValue: anObject forVariable: #jmeno)</body>

<body package="DaskalosUserClasses" selector="narodnost">narodnost
"generated by Daskalos"

     ^narodnost</body>

<body package="DaskalosUserClasses" selector="narodnost:">narodnost: anObject
"generated by Daskalos"

     narodnost := (self checkValue: anObject forVariable: #narodnost)</body>

<body package="DaskalosUserClasses" selector="oceneni">oceneni
"generated by Daskalos"

     ^oceneni</body>

<body package="DaskalosUserClasses" selector="pohlavi:">pohlavi: anObject
"generated by Daskalos"

     pohlavi := (self checkValue: anObject forVariable: #pohlavi)</body>

<body package="DaskalosUserClasses" selector="praceHodin">praceHodin
"generated by Daskalos"

     ^praceHodin</body>

<body package="DaskalosUserClasses" selector="praceHodin:">praceHodin: anObject
"generated by Daskalos"

     praceHodin := (self checkValue: anObject forVariable: #praceHodin)</body>

<body package="DaskalosUserClasses" selector="prijmeni">prijmeni
"generated by Daskalos"

     ^prijmeni</body>

<body package="DaskalosUserClasses" selector="prijmeni:">prijmeni: anObject
"generated by Daskalos"

     prijmeni := (self checkValue: anObject forVariable: #prijmeni)</body>
</methods>

<methods>
<class-id>Osoba</class-id> <category>other methods</category>

<body package="DaskalosUserClasses" selector="datumNarozeni">datumNarozeni
	"generated by Daskalos"

	^datumNarozeni printFormat: #(1 2 3 $. 1 1)</body>

<body package="DaskalosUserClasses" selector="datumNarozeni:">datumNarozeni: anObject 
	"generated by Daskalos"

	| tmpDatumNarozeni |
	tmpDatumNarozeni := self checkValue: anObject forVariable: #datumNarozeni.
	tmpDatumNarozeni &lt; (Date readFromString: '1-1-1900') 
		ifTrue: [self error: 'Minimalni povoleny datum narozeni je 1-1-1900'].
	datumNarozeni := tmpDatumNarozeni</body>

<body package="DaskalosUserClasses" selector="Mzda">Mzda
	^praceHodin * hodinovaMzda</body>

<body package="DaskalosUserClasses" selector="PocetEpizod">PocetEpizod
	^0</body>

<body package="DaskalosUserClasses" selector="pohlavi">pohlavi
	"generated by Daskalos"

	pohlavi isNil ifTrue: [^'&lt;neuvedeno&gt;'] ifFalse: [^pohlavi]</body>
</methods>

<methods>
<class-id>Osoba</class-id> <category>instance initialization</category>

<body package="DaskalosUserClasses" selector="initialize">initialize
"generated by Daskalos"

     super initialize.
     jmeno := nil.
     prijmeni := nil.
     datumNarozeni := nil.
     narodnost := nil.
     pohlavi := nil.
     oceneni := Set new.
     praceHodin := nil.
     hodinovaMzda := nil.
</body>
</methods>


<class>
<name>Herec</name>
<environment>Smalltalk</environment>
<super>Osoba</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>DaskalosUserClasses</category>
<attributes>
<package>DaskalosUserClasses</package>
</attributes>
</class>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Herec class</class-id> <category>instance variables behavior</category>

<body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes
"resource for Daskalos"
^((Core.Dictionary new) add: (#narodnost -&gt; Core.String); add: (#datumNarozeni -&gt; Core.Date); add: (#prijmeni -&gt; Core.String); add: (#jmeno -&gt; Core.String); add: (#pohlavi -&gt; Core.String); yourself)</body>
</methods>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Herec</class-id> <category>instance initialization</category>

<body package="DaskalosUserClasses" selector="initialize">initialize
"generated by Daskalos"

     super initialize.
</body>
</methods>

<methods>
<class-id>Herec</class-id> <category>other methods</category>

<body package="DaskalosUserClasses" selector="PocetEpizod">PocetEpizod
	"Pocet epizod, ve kterych herec hral bez ohledu na pocet postav"

	^(Epizoda allInstances 
		select: [:ep | (ep postavy collect: [:p | p herec]) includes: self]) size</body>

<body package="DaskalosUserClasses" selector="PocetRoli">PocetRoli
	"Pocet roli, ktere herec hral"

	^(Postava allInstances select: [:po | po herec = self]) size</body>
</methods>


<class>
<name>Scenarista</name>
<environment>Smalltalk</environment>
<super>Osoba</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>prumPocetStran </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>DaskalosUserClasses</category>
<attributes>
<package>DaskalosUserClasses</package>
</attributes>
</class>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Scenarista class</class-id> <category>instance variables behavior</category>

<body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes
"resource for Daskalos"
^((Core.Dictionary new) add: (#narodnost -&gt; Core.String); add: (#prumPocetStran -&gt; Core.Number); add: (#datumNarozeni -&gt; Core.Date); add: (#prijmeni -&gt; Core.String); add: (#jmeno -&gt; Core.String); add: (#pohlavi -&gt; Core.String); yourself)</body>
</methods>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Scenarista</class-id> <category>accessing</category>

<body package="DaskalosUserClasses" selector="prumPocetStran">prumPocetStran
"generated by Daskalos"

     ^prumPocetStran</body>

<body package="DaskalosUserClasses" selector="prumPocetStran:">prumPocetStran: anObject
"generated by Daskalos"

     prumPocetStran := (self checkValue: anObject forVariable: #prumPocetStran)</body>
</methods>

<methods>
<class-id>Scenarista</class-id> <category>instance initialization</category>

<body package="DaskalosUserClasses" selector="initialize">initialize
"generated by Daskalos"

     super initialize.
     prumPocetStran := nil.
</body>
</methods>

<methods>
<class-id>Scenarista</class-id> <category>other methods</category>

<body package="DaskalosUserClasses" selector="CelkemStran">CelkemStran
	"Celkem stran za vsechny epizody"

	^(Epizoda allInstances select: [:ep | ep scenariste includes: self]) size 
		* prumPocetStran</body>

<body package="DaskalosUserClasses" selector="PocetEpizod">PocetEpizod
	"Pocet epizod, na kterych se scenarista podilel"

	^(Epizoda allInstances select: [:ep | ep scenariste includes: self]) size</body>
</methods>


<class>
<name>Reziser</name>
<environment>Smalltalk</environment>
<super>Osoba</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>DaskalosUserClasses</category>
<attributes>
<package>DaskalosUserClasses</package>
</attributes>
</class>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Reziser class</class-id> <category>instance variables behavior</category>

<body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes
"resource for Daskalos"
^((Core.Dictionary new) add: (#prijmeni -&gt; Core.String); add: (#pohlavi -&gt; Core.String); add: (#datumNarozeni -&gt; Core.Date); add: (#jmeno -&gt; Core.String); add: (#narodnost -&gt; Core.String); yourself)</body>
</methods>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Reziser</class-id> <category>other methods</category>

<body package="DaskalosUserClasses" selector="PocetEpizod">PocetEpizod
	"Pocet epizod, ktere dany reziser reziroval"

	^(Epizoda allInstances select: [:ep | ep reziser = self]) size</body>

<body package="DaskalosUserClasses" selector="VedeOsoby">VedeOsoby
	"Vedene osoby reziserem - scenariste a herci"

	| epizody vedeneOsoby |
	epizody := Epizoda allInstances select: [:ep | ep reziser = self].
	vedeneOsoby := (epizody collect: [:es | es scenariste]) flatten asSet.
	((epizody collect: [:es | es postavy]) flatten collect: [:p | p herec]) 
		asSet do: [:h | vedeneOsoby add: h].
	^vedeneOsoby</body>
</methods>

<methods>
<class-id>Reziser</class-id> <category>instance initialization</category>

<body package="DaskalosUserClasses" selector="initialize">initialize
"generated by Daskalos"

     super initialize.
</body>
</methods>


<class>
<name>Spolecnost</name>
<environment>Smalltalk</environment>
<super>DaskalosDataObject</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>nazev adresa </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>DaskalosUserClasses</category>
<attributes>
<package>DaskalosUserClasses</package>
</attributes>
</class>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Spolecnost class</class-id> <category>instance variables behavior</category>

<body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes
"resource for Daskalos"
^((Core.Dictionary new) add: (#adresa -&gt; Core.Object); add: (#nazev -&gt; Core.String); yourself)</body>
</methods>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Spolecnost</class-id> <category>accessing</category>

<body package="DaskalosUserClasses" selector="adresa">adresa
"generated by Daskalos"

     ^adresa</body>

<body package="DaskalosUserClasses" selector="nazev">nazev
"generated by Daskalos"

     ^nazev</body>

<body package="DaskalosUserClasses" selector="nazev:">nazev: anObject
"generated by Daskalos"

     nazev := (self checkValue: anObject forVariable: #nazev)</body>
</methods>

<methods>
<class-id>Spolecnost</class-id> <category>instance initialization</category>

<body package="DaskalosUserClasses" selector="initialize">initialize
"generated by Daskalos"

     super initialize.
     nazev := nil.
     adresa := nil.
</body>
</methods>

<methods>
<class-id>Spolecnost</class-id> <category>other methods</category>

<body package="DaskalosUserClasses" selector="adresa:">adresa: anObject 
	"generated by Daskalos"

	| tmpAdresa |
	tmpAdresa := self checkValue: anObject forVariable: #adresa.
	(tmpAdresa isMemberOf: Adresa) 
		ifFalse: 
			[self 
				error: 'Zprava ''Spolecnost adresa:'' prijima pouze instanci tridy ''Adresa'''].
	adresa := tmpAdresa</body>

<body package="DaskalosUserClasses" selector="NejlepsiSerial">NejlepsiSerial
	"Nejlepsi serial spolecnosti podle prumerneho hodnoceni serialu"

	| serialy |
	serialy := Serial allInstances select: [:se | se spolecnost = self].
	^serialy inject: nil
		into: 
			[:a :b | 
			(a isNil ifTrue: [0] ifFalse: [a Hodnoceni]) &lt; b Hodnoceni 
				ifFalse: [a]
				ifTrue: [b]]</body>
</methods>


</st-source>
